#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–æ–≤
SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
export BASH_SCRIPTS_ROOT="$SCRIPT_ROOT"

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
source "$SCRIPT_ROOT/lib/core/logging.sh"
source "$SCRIPT_ROOT/lib/core/utils.sh"
source "$SCRIPT_ROOT/lib/core/validation.sh"
source "$SCRIPT_ROOT/lib/git/git-core.sh"
source "$SCRIPT_ROOT/lib/git/git-batch.sh"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–π—Å—Ç–≤
search_properties_in_repo() {
    local repo_dir="$1"
    local prop_name="$2"
    local prop_value="$3"
    local search_source="$4"
    
    cd "$repo_dir" || return 1
    
    local project_name=$(basename "$repo_dir")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ pom.xml –µ—Å–ª–∏ –µ—Å—Ç—å
    if [[ -f "pom.xml" ]]; then
        local artifact_name=$(grep -oP '<artifactId>\K[^<]+' "pom.xml" | head -1)
        if [[ -n "$artifact_name" ]]; then
            project_name="$artifact_name"
        fi
    fi
    
    log_info "–ò—â–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ: $project_name"
    
    local found_matches=false
    local match_count=0
    
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–∞—Ö
    search_in_files() {
        local search_patterns=("$@")
        local pattern_str=$(printf "%s " "${search_patterns[@]}")
        
        while IFS= read -r -d '' file; do
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ target
            if [[ "$file" == *"/target/"* ]] || \
               [[ "$file" == *"/build/"* ]] || \
               { file "$file" 2>/dev/null | grep -q "binary"; }; then
                continue
            fi
            
            while IFS=: read -r line_num line_content; do
                if [[ "$line_content" =~ $prop_value ]]; then
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    local is_relevant=false
                    
                    # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if [[ "$file" == *.yaml || "$file" == *.yml || "$file" == *.properties ]]; then
                        [[ "$line_content" =~ $prop_name ]] && is_relevant=true
                    # –î–ª—è XML —Ñ–∞–π–ª–æ–≤
                    elif [[ "$file" == *.xml ]]; then
                        [[ "$line_content" =~ [Ll]evel ]] && is_relevant=true
                    # –î–ª—è Java —Ñ–∞–π–ª–æ–≤
                    elif [[ "$file" == *.java ]]; then
                        [[ "$line_content" =~ [Dd][Ee][Bb][Uu][Gg]|[Ll][Oo][Gg] ]] && is_relevant=true
                    else
                        is_relevant=true
                    fi
                    
                    if [[ "$is_relevant" == "true" ]]; then
                        if [[ "$found_matches" == "false" ]]; then
                            echo -e "${GREEN}üìÅ –ü—Ä–æ–µ–∫—Ç: $project_name${NC}"
                            found_matches=true
                        fi
                        ((match_count++))
                        local rel_path=$(realpath --relative-to="$repo_dir" "$file")
                        echo -e "   üìÑ ${YELLOW}$rel_path:${line_num}${NC}"
                        echo -e "      ${BLUE}$(echo "$line_content" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')${NC}"
                    fi
                fi
            done < <(grep -n "$prop_value" "$file" 2>/dev/null || true)
        done < <(eval "find \"$repo_dir\" -type f \( ${pattern_str} \) -not -path \"*/.git/*\" -print0 2>/dev/null")
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    local resource_patterns=(
        "-name \"application*.yaml\""
        "-name \"application*.yml\""
        "-name \"application*.properties\""
        "-name \"logback*.xml\""
        "-name \"log4j*.properties\""
        "-name \"logging.properties\""
    )
    
    local source_patterns=(
        "-name \"*.java\""
    )
    
    # –ü–æ–∏—Å–∫ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö
    search_in_files "${resource_patterns[@]}"
    
    # –ü–æ–∏—Å–∫ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ "$search_source" == "true" ]]; then
        search_in_files "${source_patterns[@]}"
    fi
    
    if [[ "$found_matches" == "true" ]]; then
        echo -e "   ${GREEN}–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: $match_count${NC}"
        echo
        return 0
    else
        log_info "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
}

find_properties_in_all_repos() {
    local dir="$1" 
    local prop_name="$2" 
    local prop_value="$3" 
    local branch="$4" 
    local search_source="$5"
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    log_action "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ $branch)..."
    if ! batch_update_branches "$dir" "$branch"; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    fi
    
    # –ó–∞—Ç–µ–º –∏—â–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
    log_action "–ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤: $prop_name = $prop_value"
    
    local repos=()
    while IFS= read -r repo; do
        repos+=("$repo")
    done < <(find_git_repos "$dir")
    
    local total=${#repos[@]}
    local found_count=0
    
    if [[ $total -eq 0 ]]; then
        log_warning "–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
        return 1
    fi
    
    for repo in "${repos[@]}"; do
        echo
        if search_properties_in_repo "$repo" "$prop_name" "$prop_value" "$search_source"; then
            ((found_count++))
        fi
    done
    
    echo
    log_action "–ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞:"
    log_success "–ü—Ä–æ–µ–∫—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏: $found_count"
    log_info "–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: $total"
}

main() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies "git" "grep" "find" "realpath" "file" || exit 1
    
    if [[ $# -lt 4 ]]; then
        log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
        show_usage
        exit 1
    fi
    
    local dir="$1"
    local prop_name="$2"
    local prop_value="$3"
    local branch="$4"
    local search_source="false"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é --source
    for arg in "$@"; do
        if [[ "$arg" == "--source" ]]; then
            search_source="true"
            break
        fi
    done
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validate_directory "$dir" || exit 1
    validate_git_branch "$branch" || exit 1
    validate_property_name "$prop_name" || exit 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    find_properties_in_all_repos "$dir" "$prop_name" "$prop_value" "$branch" "$search_source"
}

show_usage() {
    cat << EOF
Usage: $(basename "$0") <directory> <property_name> <property_value> <branch> [--source]

Search for properties in all Git repositories.

Arguments:
  directory       Root directory containing Git repositories
  property_name   Property name to search for
  property_value  Property value to search for  
  branch          Git branch to check out and search in
  --source        Also search in source files (.java)

Examples:
  $(basename "$0") /mnt/c/projects logging.level DEBUG develop
  $(basename "$0") /mnt/c/projects level DEBUG main --source
  $(basename "$0") /mnt/c/projects root.level DEBUG feature/logging
EOF
}

# –ó–∞–ø—É—Å–∫
main "$@"
